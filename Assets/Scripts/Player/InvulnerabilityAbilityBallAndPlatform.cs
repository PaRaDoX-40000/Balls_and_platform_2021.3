using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class InvulnerabilityAbilityBallAndPlatform : MonoBehaviour
{
    [SerializeField] private EntityHealth _entityHealth;
    [SerializeField] private PlatformTrampoline _platformTrampoline;
    [SerializeField] private PlatformTimerAnimation _platformTimerAnimation;
    [SerializeField] private int _maxTimeToDamage = 5;
    private float _timeToDamage;
    private bool _invulnerable=false;

    private void Start()
    {
        _platformTrampoline.BallDetached.AddListener(SetInvulnerabletFalse);
        _platformTrampoline.BallLandedAction.AddListener(SetInvulnerabletTrye);
    }

    private void OnDestroy()
    {
        _platformTrampoline.BallDetached.AddListener(SetInvulnerabletFalse);
        _platformTrampoline.BallLandedAction.AddListener(SetInvulnerabletTrye);
    }

    void Update()
    {
        if(_invulnerable == false)
        {
            if(_timeToDamage < _maxTimeToDamage)
            {
                _timeToDamage += Time.deltaTime * 2;
                _platformTimerAnimation.SetStateAnimation(1-(_timeToDamage / _maxTimeToDamage));
            }
            
        }
        else
        {
            if (_timeToDamage>=0)
            {
                _timeToDamage -= Time.deltaTime;
                _platformTimerAnimation.SetStateAnimation(1 - (_timeToDamage / _maxTimeToDamage));
            }
            else
            {
                SetInvulnerabletFalse();
                _entityHealth.TakeDamage(1,ObstacleClolr.Null);
                _timeToDamage = _maxTimeToDamage;
                SetInvulnerabletTrye();
            }
        }
    }
     
    private void SetInvulnerabletTrye()
    {
        _invulnerable = true;
        _entityHealth.SetInvulnerability(true);
    }
    private void SetInvulnerabletFalse()
    {
        _invulnerable = false;
        _entityHealth.SetInvulnerability(false);
    }
}
